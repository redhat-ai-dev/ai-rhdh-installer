apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dev-namespace-setup
spec:
  description: >-
    Create the required resources for AI Software Template tasks to run in a namespace.
  params:
    - default: ''
      description: |
        Cosign public key
      name: cosign_pubkey
      type: string
    - default: ''
      description: |
        Git token
      name: git_token
      type: string
    - default: ''
      description: |
        GitLab Personal Access Token
      name: gitlab_token
      type: string
    - default: ''
      description: |
        Pipelines as Code webhook secret
      name: pipelines_webhook_secret
      type: string
    - default: ''
      description: |
        Image registry token
      name: quay_dockerconfigjson
      type: string
  steps:
    - env:
      - name: COSIGN_SIGNING_PUBLIC_KEY
        value: $(params.cosign_pubkey)
      - name: GIT_TOKEN
        value: $(params.git_token)
      - name: GITLAB_TOKEN
        value: $(params.gitlab_token)
      - name: PIPELINES_WEBHOOK_SECRET
        value: $(params.pipelines_webhook_secret)
      - name: QUAY_DOCKERCONFIGJSON
        value: $(params.quay_dockerconfigjson)
      image: "registry.redhat.io/openshift4/ose-tools-rhel8:latest"
      name: setup
      script: |
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        SECRET_NAME="cosign-pub"
        if [ -n "$COSIGN_SIGNING_PUBLIC_KEY" ]; then
          echo -n "* $SECRET_NAME secret: "
          cat <<EOF | kubectl apply -f - >/dev/null
        apiVersion: v1
        data:
          cosign.pub: $COSIGN_SIGNING_PUBLIC_KEY
        kind: Secret
        metadata:
          labels:
            app.kubernetes.io/instance: default
            app.kubernetes.io/part-of: tekton-chains
            operator.tekton.dev/operand-name: tektoncd-chains
          name: $SECRET_NAME
        type: Opaque
        EOF
          echo "OK"
        fi

        SECRET_NAME="gitlab-auth-secret"
        if [ -n "$GITLAB_TOKEN" ]; then
          echo -n "* $SECRET_NAME secret: "
          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=password=$GITLAB_TOKEN \
            --from-literal=username=oauth2 \
            --type=kubernetes.io/basic-auth \
            --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true >/dev/null
          echo "OK"
        fi

        SECRET_NAME="gitops-auth-secret"
        if [ -n "$GIT_TOKEN" ]; then
          echo -n "* $SECRET_NAME secret: "
          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=password=$GIT_TOKEN \
            --type=kubernetes.io/basic-auth \
            --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true >/dev/null
          echo "OK"
        fi

        SECRET_NAME="pipelines-secret"
        if [ -n "$PIPELINES_WEBHOOK_SECRET" ]; then
          echo -n "* $SECRET_NAME secret: "
          kubectl create secret generic "$SECRET_NAME" \
            --from-literal=webhook.secret=$PIPELINES_WEBHOOK_SECRET \
            --dry-run=client -o yaml | kubectl apply --filename - --overwrite=true >/dev/null
          echo "OK"
        fi
        
        SECRET_NAME="rhtap-image-registry-token"
        if [ -n "$QUAY_DOCKERCONFIGJSON" ]; then
          echo -n "* $SECRET_NAME secret: "
          DATA=$(mktemp)
          echo -n "$QUAY_DOCKERCONFIGJSON" >"$DATA"
          kubectl create secret docker-registry "$SECRET_NAME" \
            --from-file=.dockerconfigjson="$DATA" --dry-run=client -o yaml | \
            kubectl apply --filename - --overwrite=true >/dev/null
          rm "$DATA"
          echo -n "."
          while ! kubectl get serviceaccount pipeline >/dev/null &>2; do
            sleep 2
            echo -n "_"
          done
          for SA in default pipeline; do
            kubectl patch serviceaccounts "$SA" --patch "
          secrets:
            - name: $SECRET_NAME
          imagePullSecrets:
            - name: $SECRET_NAME
          " >/dev/null
            echo -n "."
          done
          echo "OK"
        fi

        echo
        echo "Namespace is ready to execute AI Software Template pipelines"
      workingDir: /tmp